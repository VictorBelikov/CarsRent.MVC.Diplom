@model CarsRentEF.Models.Car

@{
    ViewBag.Title = "Car Create";
}

<div class="well well-sm"><h1>Добавить автомобиль</h1></div>

@using (Html.BeginForm("Create", "Car", FormMethod.Post, new { enctype = "multipart/form-data" })) {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Госномер, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Госномер, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Госномер, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VIN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VIN, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VIN, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Марка, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Марка, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Марка, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Модель, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Модель, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Модель, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ГодВыпуска, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ГодВыпуска, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ГодВыпуска, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ТипКузова, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ТипКузова, new { htmlAttributes = new { @class = "form-control", type = "hidden" } })
                @Html.DropDownList("Bodies", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ТипКузова, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ТипДвигателя, "Тип Двигателя", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ТипДвигателя, new { htmlAttributes = new { @class = "form-control", type = "hidden" } })
                @Html.DropDownList("Engines", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ТипДвигателя, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ОбъемДвигателя, "Объем Двигателя (л)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ОбъемДвигателя, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ОбъемДвигателя, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Мощность, "Мощность (л.с.)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Мощность, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Мощность, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Цвет, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Цвет, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Цвет, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Стоимость, "Стоимость ($)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Стоимость, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Стоимость, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.СтоимостПрокатаВСут, "Стоимость в сутки ($)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.СтоимостПрокатаВСут, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.СтоимостПрокатаВСут, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Статус, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Статус, new { htmlAttributes = new { @class = "form-control", type = "hidden" } })
                @Html.DropDownList("Statuses", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Статус, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Выберите файл", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group">
                    <label class="input-group-btn">
                        <span class="btn btn-primary">
                            Обзор&hellip; <input name="imageUpload" type="file" style="display: none;" multiple>
                        </span>
                    </label>
                    <input type="text" class="form-control" readonly style="width: 200px">
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 col-md-offset-2">
                @if (Model.Image == null) {
                    <p></p>
                } else {
                    <img width="150" src="@Url.Action("GetImage", "Car", new {Model.АвтоID})" class="img-thumbnail" />
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-success">
                    <span class="glyphicon glyphicon-plus"></span>&nbsp;Создать
                </button>
                &nbsp;&nbsp;
                <a href="@Url.Action("Index")" class="btn btn-default">
                    <span class="glyphicon glyphicon-list"></span>&nbsp;К списку
                </a>
            </div>
        </div>
    </div>
}

@* проверка достоверности клиентской стороны *@
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).on('change', ':file', function () {
            var input = $(this),
                numFiles = input.get(0).files ? input.get(0).files.length : 1,
                label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [numFiles, label]);
        });

        $(document).ready(function () {
            $(':file').on('fileselect', function (event, numFiles, label) {

                var input = $(this).parents('.input-group').find(':text'),
                    log = numFiles > 1 ? numFiles + ' files selected' : label;

                if (input.length) {
                    input.val(log);
                } else {
                    if (log) alert(log);
                }

            });
        });

        // переопределение валидации на стороне клиента
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>
}
